// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/pkg/utils"
	"time"
)

// CrossSellableProducts - Stores references to products that can be cross sold with the current product.
type CrossSellableProducts struct {
	DollarRelation []BaseRelation `json:"$relation,omitempty"`
}

func (o *CrossSellableProducts) GetDollarRelation() []BaseRelation {
	if o == nil {
		return nil
	}
	return o.DollarRelation
}

type Feature struct {
	// An arbitrary set of tags attached to a feature
	Tags    []string `json:"_tags,omitempty"`
	Feature *string  `json:"feature,omitempty"`
}

func (o *Feature) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Feature) GetFeature() *string {
	if o == nil {
		return nil
	}
	return o.Feature
}

// ProductDownloads - Stores references to a set of files downloadable from the product.
// e.g: tech specifications, quality control sheets, privacy policy agreements
type ProductDownloads struct {
	DollarRelation []BaseRelation `json:"$relation,omitempty"`
}

func (o *ProductDownloads) GetDollarRelation() []BaseRelation {
	if o == nil {
		return nil
	}
	return o.DollarRelation
}

// ProductImages - Stores references to a set of file images of the product
type ProductImages struct {
	DollarRelation []BaseRelation `json:"$relation,omitempty"`
}

func (o *ProductImages) GetDollarRelation() []BaseRelation {
	if o == nil {
		return nil
	}
	return o.DollarRelation
}

// ProductType - The type of Product:
//
// | type | description |
// |----| ----|
// | `product` | Represents a physical good |
// | `service` | Represents a service or virtual product |
type ProductType string

const (
	ProductTypeProduct ProductType = "product"
	ProductTypeService ProductType = "service"
)

func (e ProductType) ToPointer() *ProductType {
	return &e
}

func (e *ProductType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "product":
		fallthrough
	case "service":
		*e = ProductType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductType: %v", v)
	}
}

type Product struct {
	ACL       []EntityACL `json:"_acl"`
	CreatedAt time.Time   `json:"_created_at"`
	ID        string      `json:"_id"`
	// Organization Id the entity belongs to
	Org       string        `json:"_org"`
	Owners    []EntityOwner `json:"_owners"`
	Schema    string        `json:"_schema"`
	Tags      []string      `json:"_tags"`
	Title     string        `json:"_title"`
	UpdatedAt time.Time     `json:"_updated_at"`
	// Stores references to the availability files that define where this product is available.
	// These files are used when interacting with products via epilot Journeys, thought the AvailabilityCheck block.
	//
	AvailabilityFiles []BaseRelation `json:"availability_files,omitempty"`
	// The product code
	Code *string `json:"code,omitempty"`
	// Stores references to products that can be cross sold with the current product.
	CrossSellableProducts *CrossSellableProducts `json:"cross_sellable_products,omitempty"`
	// A description of the product. Multi-line supported.
	Description *string   `json:"description,omitempty"`
	Feature     []Feature `json:"feature,omitempty"`
	// Not visible to customers, only in internal tables
	InternalName *string `json:"internal_name,omitempty"`
	// The description for the product
	Name         string        `json:"name"`
	PriceOptions *BaseRelation `json:"price_options,omitempty"`
	// Stores references to a set of files downloadable from the product.
	// e.g: tech specifications, quality control sheets, privacy policy agreements
	//
	ProductDownloads *ProductDownloads `json:"product_downloads,omitempty"`
	// Stores references to a set of file images of the product
	ProductImages *ProductImages `json:"product_images,omitempty"`
	// The type of Product:
	//
	// | type | description |
	// |----| ----|
	// | `product` | Represents a physical good |
	// | `service` | Represents a service or virtual product |
	//
	Type *ProductType `default:"product" json:"type"`
}

func (p Product) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Product) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Product) GetACL() []EntityACL {
	if o == nil {
		return []EntityACL{}
	}
	return o.ACL
}

func (o *Product) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Product) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Product) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *Product) GetOwners() []EntityOwner {
	if o == nil {
		return []EntityOwner{}
	}
	return o.Owners
}

func (o *Product) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *Product) GetTags() []string {
	if o == nil {
		return []string{}
	}
	return o.Tags
}

func (o *Product) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Product) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Product) GetAvailabilityFiles() []BaseRelation {
	if o == nil {
		return nil
	}
	return o.AvailabilityFiles
}

func (o *Product) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Product) GetCrossSellableProducts() *CrossSellableProducts {
	if o == nil {
		return nil
	}
	return o.CrossSellableProducts
}

func (o *Product) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Product) GetFeature() []Feature {
	if o == nil {
		return nil
	}
	return o.Feature
}

func (o *Product) GetInternalName() *string {
	if o == nil {
		return nil
	}
	return o.InternalName
}

func (o *Product) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Product) GetPriceOptions() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.PriceOptions
}

func (o *Product) GetProductDownloads() *ProductDownloads {
	if o == nil {
		return nil
	}
	return o.ProductDownloads
}

func (o *Product) GetProductImages() *ProductImages {
	if o == nil {
		return nil
	}
	return o.ProductImages
}

func (o *Product) GetType() *ProductType {
	if o == nil {
		return nil
	}
	return o.Type
}
