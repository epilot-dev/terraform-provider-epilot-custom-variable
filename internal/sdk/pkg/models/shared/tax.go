// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/pkg/utils"
	"time"
)

type Region string

const (
	RegionDe Region = "DE"
	RegionAt Region = "AT"
	RegionCh Region = "CH"
)

func (e Region) ToPointer() *Region {
	return &e
}

func (e *Region) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DE":
		fallthrough
	case "AT":
		fallthrough
	case "CH":
		*e = Region(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Region: %v", v)
	}
}

type TaxType string

const (
	TaxTypeVat    TaxType = "VAT"
	TaxTypeCustom TaxType = "Custom"
)

func (e TaxType) ToPointer() *TaxType {
	return &e
}

func (e *TaxType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VAT":
		fallthrough
	case "Custom":
		*e = TaxType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxType: %v", v)
	}
}

type Tax struct {
	// Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
	ACL       BaseEntityACL `json:"_acl"`
	CreatedAt time.Time     `json:"_created_at"`
	ID        string        `json:"_id"`
	// Organization Id the entity belongs to
	Org         string            `json:"_org"`
	Owners      []BaseEntityOwner `json:"_owners"`
	Schema      string            `json:"_schema"`
	Tags        []string          `json:"_tags"`
	Title       string            `json:"_title"`
	UpdatedAt   time.Time         `json:"_updated_at"`
	Active      bool              `json:"active"`
	Description *string           `json:"description,omitempty"`
	Rate        string            `json:"rate"`
	Region      Region            `json:"region"`
	Type        TaxType           `json:"type"`
}

func (t Tax) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Tax) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Tax) GetACL() BaseEntityACL {
	if o == nil {
		return BaseEntityACL{}
	}
	return o.ACL
}

func (o *Tax) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Tax) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Tax) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *Tax) GetOwners() []BaseEntityOwner {
	if o == nil {
		return []BaseEntityOwner{}
	}
	return o.Owners
}

func (o *Tax) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *Tax) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Tax) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Tax) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Tax) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Tax) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Tax) GetRate() string {
	if o == nil {
		return ""
	}
	return o.Rate
}

func (o *Tax) GetRegion() Region {
	if o == nil {
		return Region("")
	}
	return o.Region
}

func (o *Tax) GetType() TaxType {
	if o == nil {
		return TaxType("")
	}
	return o.Type
}
