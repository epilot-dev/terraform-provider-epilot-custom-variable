// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TaxUpdateRegion string

const (
	TaxUpdateRegionDe TaxUpdateRegion = "DE"
	TaxUpdateRegionAt TaxUpdateRegion = "AT"
	TaxUpdateRegionCh TaxUpdateRegion = "CH"
)

func (e TaxUpdateRegion) ToPointer() *TaxUpdateRegion {
	return &e
}

func (e *TaxUpdateRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DE":
		fallthrough
	case "AT":
		fallthrough
	case "CH":
		*e = TaxUpdateRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxUpdateRegion: %v", v)
	}
}

type TaxUpdateType string

const (
	TaxUpdateTypeVat    TaxUpdateType = "VAT"
	TaxUpdateTypeCustom TaxUpdateType = "Custom"
)

func (e TaxUpdateType) ToPointer() *TaxUpdateType {
	return &e
}

func (e *TaxUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VAT":
		fallthrough
	case "Custom":
		*e = TaxUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxUpdateType: %v", v)
	}
}

type TaxUpdate struct {
	Active      *bool            `json:"active,omitempty"`
	Description *string          `json:"description,omitempty"`
	Rate        *string          `json:"rate,omitempty"`
	Region      *TaxUpdateRegion `json:"region,omitempty"`
	Type        *TaxUpdateType   `json:"type,omitempty"`
}

func (o *TaxUpdate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *TaxUpdate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TaxUpdate) GetRate() *string {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *TaxUpdate) GetRegion() *TaxUpdateRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *TaxUpdate) GetType() *TaxUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}
