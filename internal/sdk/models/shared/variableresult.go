// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type VariableResultType string

const (
	VariableResultTypeSimple  VariableResultType = "simple"
	VariableResultTypePartial VariableResultType = "partial"
)

func (e VariableResultType) ToPointer() *VariableResultType {
	return &e
}
func (e *VariableResultType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "simple":
		fallthrough
	case "partial":
		*e = VariableResultType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VariableResultType: %v", v)
	}
}

type VariableResult struct {
	// Variable description
	Description *string `json:"description,omitempty"`
	// Variable group
	Group *string `json:"group,omitempty"`
	// The value which is used to insert to template
	Insert *string `json:"insert,omitempty"`
	// Payload for the QR data
	Qrdata *string             `json:"qrdata,omitempty"`
	Type   *VariableResultType `json:"type,omitempty"`
}

func (o *VariableResult) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *VariableResult) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *VariableResult) GetInsert() *string {
	if o == nil {
		return nil
	}
	return o.Insert
}

func (o *VariableResult) GetQrdata() *string {
	if o == nil {
		return nil
	}
	return o.Qrdata
}

func (o *VariableResult) GetType() *VariableResultType {
	if o == nil {
		return nil
	}
	return o.Type
}
