// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-custom-variable/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-custom-variable/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-custom-variable/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &CustomVariableDataSource{}
var _ datasource.DataSourceWithConfigure = &CustomVariableDataSource{}

func NewCustomVariableDataSource() datasource.DataSource {
	return &CustomVariableDataSource{}
}

// CustomVariableDataSource is the data source implementation.
type CustomVariableDataSource struct {
	client *sdk.SDK
}

// CustomVariableDataSourceModel describes the data model.
type CustomVariableDataSourceModel struct {
	Config       *tfTypes.Config `tfsdk:"config"`
	CreatedAt    types.String    `tfsdk:"created_at"`
	CreatedBy    types.String    `tfsdk:"created_by"`
	HelperLogic  types.String    `tfsdk:"helper_logic"`
	HelperParams []types.String  `tfsdk:"helper_params"`
	ID           types.String    `tfsdk:"id"`
	Key          types.String    `tfsdk:"key"`
	Name         types.String    `tfsdk:"name"`
	Tags         []types.String  `tfsdk:"tags"`
	Template     types.String    `tfsdk:"template"`
	Type         types.String    `tfsdk:"type"`
	UpdatedAt    types.String    `tfsdk:"updated_at"`
	UpdatedBy    types.String    `tfsdk:"updated_by"`
}

// Metadata returns the data source type name.
func (r *CustomVariableDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_custom_variable"
}

// Schema defines the schema for the data source.
func (r *CustomVariableDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CustomVariable DataSource",

		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `Variable configuration`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `Creation time`,
			},
			"created_by": schema.StringAttribute{
				Computed:    true,
				Description: `Created by`,
			},
			"helper_logic": schema.StringAttribute{
				Computed:    true,
				Description: `The helper function logic`,
			},
			"helper_params": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The helper function parameter's names`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Custom vairable ID`,
			},
			"key": schema.StringAttribute{
				Computed:    true,
				Description: `The key which is used for Handlebar variable syntax {{"{{"}}key{{"}}"}}`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Custom variable name`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The tags of custom variable`,
			},
			"template": schema.StringAttribute{
				Computed:    true,
				Description: `Handlebar template that used to generate the variable content`,
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `Custom variable type`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `Last update time`,
			},
			"updated_by": schema.StringAttribute{
				Computed:    true,
				Description: `Updated by`,
			},
		},
	}
}

func (r *CustomVariableDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CustomVariableDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *CustomVariableDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.GetCustomVariableRequest{
		ID: id,
	}
	res, err := r.client.CustomVariables.GetCustomVariable(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CustomVariable != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedCustomVariable(res.CustomVariable)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
