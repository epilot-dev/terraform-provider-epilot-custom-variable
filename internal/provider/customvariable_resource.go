// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-custom-variable/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-custom-variable/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-custom-variable/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &CustomVariableResource{}
var _ resource.ResourceWithImportState = &CustomVariableResource{}

func NewCustomVariableResource() resource.Resource {
	return &CustomVariableResource{}
}

// CustomVariableResource defines the resource implementation.
type CustomVariableResource struct {
	client *sdk.SDK
}

// CustomVariableResourceModel describes the resource data model.
type CustomVariableResourceModel struct {
	Config       types.String   `tfsdk:"config"`
	CreatedAt    types.String   `tfsdk:"created_at"`
	CreatedBy    types.String   `tfsdk:"created_by"`
	HelperLogic  types.String   `tfsdk:"helper_logic"`
	HelperParams []types.String `tfsdk:"helper_params"`
	ID           types.String   `tfsdk:"id"`
	Key          types.String   `tfsdk:"key"`
	Name         types.String   `tfsdk:"name"`
	Tags         []types.String `tfsdk:"tags"`
	Template     types.String   `tfsdk:"template"`
	Type         types.String   `tfsdk:"type"`
	UpdatedAt    types.String   `tfsdk:"updated_at"`
	UpdatedBy    types.String   `tfsdk:"updated_by"`
}

func (r *CustomVariableResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_custom_variable"
}

func (r *CustomVariableResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CustomVariable Resource",
		Attributes: map[string]schema.Attribute{
			"config": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Creation time`,
			},
			"created_by": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Created by`,
			},
			"helper_logic": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The helper function logic`,
			},
			"helper_params": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `The helper function parameter's names`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `ID`,
			},
			"key": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The key which is used for Handlebar variable syntax {{"{{"}}key{{"}}"}}`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Custom variable name`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `The tags of custom variable`,
			},
			"template": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Handlebar template that used to generate the variable content`,
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Custom variable type. must be one of ["order_table", "custom", "journey_link"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"order_table",
						"custom",
						"journey_link",
					),
				},
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Last update time`,
			},
			"updated_by": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Updated by`,
			},
		},
	}
}

func (r *CustomVariableResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CustomVariableResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *CustomVariableResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToSharedCustomVariable()
	res, err := r.client.CustomVariables.CreateCustomVariable(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CustomVariable != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedCustomVariable(res.CustomVariable)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CustomVariableResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *CustomVariableResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.GetCustomVariableRequest{
		ID: id,
	}
	res, err := r.client.CustomVariables.GetCustomVariable(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CustomVariable != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedCustomVariable(res.CustomVariable)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CustomVariableResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *CustomVariableResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	customVariable := data.ToSharedCustomVariable()
	var id string
	id = data.ID.ValueString()

	request := operations.UpdateCustomVariableRequest{
		CustomVariable: customVariable,
		ID:             id,
	}
	res, err := r.client.CustomVariables.UpdateCustomVariable(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CustomVariable != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedCustomVariable(res.CustomVariable)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CustomVariableResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *CustomVariableResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.DeleteCustomVariableRequest{
		ID: id,
	}
	res, err := r.client.CustomVariables.DeleteCustomVariable(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *CustomVariableResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
