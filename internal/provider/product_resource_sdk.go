// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *ProductResourceModel) ToCreateSDKType() *shared.ProductCreate {
	var availabilityFiles []shared.BaseRelation = nil
	for _, availabilityFilesItem := range r.AvailabilityFiles {
		var dollarRelation []shared.DollarRelation = nil
		for _, dollarRelationItem := range availabilityFilesItem.DollarRelation {
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				EntityID: entityID,
			})
		}
		availabilityFiles = append(availabilityFiles, shared.BaseRelation{
			DollarRelation: dollarRelation,
		})
	}
	code := new(string)
	if !r.Code.IsUnknown() && !r.Code.IsNull() {
		*code = r.Code.ValueString()
	} else {
		code = nil
	}
	var crossSellableProducts *shared.ProductCreateCrossSellableProducts
	if r.CrossSellableProducts != nil {
		var dollarRelation1 []shared.BaseRelation = nil
		for _, dollarRelationItem1 := range r.CrossSellableProducts.DollarRelation {
			var dollarRelation2 []shared.DollarRelation = nil
			for _, dollarRelationItem2 := range dollarRelationItem1.DollarRelation {
				entityId1 := new(string)
				if !dollarRelationItem2.EntityID.IsUnknown() && !dollarRelationItem2.EntityID.IsNull() {
					*entityId1 = dollarRelationItem2.EntityID.ValueString()
				} else {
					entityId1 = nil
				}
				dollarRelation2 = append(dollarRelation2, shared.DollarRelation{
					EntityID: entityId1,
				})
			}
			dollarRelation1 = append(dollarRelation1, shared.BaseRelation{
				DollarRelation: dollarRelation2,
			})
		}
		crossSellableProducts = &shared.ProductCreateCrossSellableProducts{
			DollarRelation: dollarRelation1,
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var feature []shared.ProductCreateFeature = nil
	for _, featureItem := range r.Feature {
		var tags []string = nil
		for _, tagsItem := range featureItem.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
		feature1 := new(string)
		if !featureItem.Feature.IsUnknown() && !featureItem.Feature.IsNull() {
			*feature1 = featureItem.Feature.ValueString()
		} else {
			feature1 = nil
		}
		feature = append(feature, shared.ProductCreateFeature{
			Tags:    tags,
			Feature: feature1,
		})
	}
	internalName := new(string)
	if !r.InternalName.IsUnknown() && !r.InternalName.IsNull() {
		*internalName = r.InternalName.ValueString()
	} else {
		internalName = nil
	}
	name := r.Name.ValueString()
	var priceOptions *shared.BaseRelation
	if r.PriceOptions != nil {
		var dollarRelation3 []shared.DollarRelation = nil
		for _, dollarRelationItem3 := range r.PriceOptions.DollarRelation {
			entityId2 := new(string)
			if !dollarRelationItem3.EntityID.IsUnknown() && !dollarRelationItem3.EntityID.IsNull() {
				*entityId2 = dollarRelationItem3.EntityID.ValueString()
			} else {
				entityId2 = nil
			}
			dollarRelation3 = append(dollarRelation3, shared.DollarRelation{
				EntityID: entityId2,
			})
		}
		priceOptions = &shared.BaseRelation{
			DollarRelation: dollarRelation3,
		}
	}
	var productDownloads *shared.ProductCreateProductDownloads
	if r.ProductDownloads != nil {
		var dollarRelation4 []shared.BaseRelation = nil
		for _, dollarRelationItem4 := range r.ProductDownloads.DollarRelation {
			var dollarRelation5 []shared.DollarRelation = nil
			for _, dollarRelationItem5 := range dollarRelationItem4.DollarRelation {
				entityId3 := new(string)
				if !dollarRelationItem5.EntityID.IsUnknown() && !dollarRelationItem5.EntityID.IsNull() {
					*entityId3 = dollarRelationItem5.EntityID.ValueString()
				} else {
					entityId3 = nil
				}
				dollarRelation5 = append(dollarRelation5, shared.DollarRelation{
					EntityID: entityId3,
				})
			}
			dollarRelation4 = append(dollarRelation4, shared.BaseRelation{
				DollarRelation: dollarRelation5,
			})
		}
		productDownloads = &shared.ProductCreateProductDownloads{
			DollarRelation: dollarRelation4,
		}
	}
	var productImages *shared.ProductCreateProductImages
	if r.ProductImages != nil {
		var dollarRelation6 []shared.BaseRelation = nil
		for _, dollarRelationItem6 := range r.ProductImages.DollarRelation {
			var dollarRelation7 []shared.DollarRelation = nil
			for _, dollarRelationItem7 := range dollarRelationItem6.DollarRelation {
				entityId4 := new(string)
				if !dollarRelationItem7.EntityID.IsUnknown() && !dollarRelationItem7.EntityID.IsNull() {
					*entityId4 = dollarRelationItem7.EntityID.ValueString()
				} else {
					entityId4 = nil
				}
				dollarRelation7 = append(dollarRelation7, shared.DollarRelation{
					EntityID: entityId4,
				})
			}
			dollarRelation6 = append(dollarRelation6, shared.BaseRelation{
				DollarRelation: dollarRelation7,
			})
		}
		productImages = &shared.ProductCreateProductImages{
			DollarRelation: dollarRelation6,
		}
	}
	typeVar := new(shared.ProductCreateType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.ProductCreateType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.ProductCreate{
		AvailabilityFiles:     availabilityFiles,
		Code:                  code,
		CrossSellableProducts: crossSellableProducts,
		Description:           description,
		Feature:               feature,
		InternalName:          internalName,
		Name:                  name,
		PriceOptions:          priceOptions,
		ProductDownloads:      productDownloads,
		ProductImages:         productImages,
		Type:                  typeVar,
	}
	return &out
}

func (r *ProductResourceModel) ToGetSDKType() *shared.ProductCreate {
	out := r.ToCreateSDKType()
	return out
}

func (r *ProductResourceModel) ToUpdateSDKType() *shared.ProductCreate {
	out := r.ToCreateSDKType()
	return out
}

func (r *ProductResourceModel) ToDeleteSDKType() *shared.ProductCreate {
	out := r.ToCreateSDKType()
	return out
}

func (r *ProductResourceModel) RefreshFromGetResponse(resp *shared.Product) {
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	r.Org = types.StringValue(resp.Org)
	if len(r.Owners) > len(resp.Owners) {
		r.Owners = r.Owners[:len(resp.Owners)]
	}
	for ownersCount, ownersItem := range resp.Owners {
		var owners1 EntityOwner
		owners1.OrgID = types.StringValue(ownersItem.OrgID)
		if ownersItem.UserID != nil {
			owners1.UserID = types.StringValue(*ownersItem.UserID)
		} else {
			owners1.UserID = types.StringNull()
		}
		if ownersCount+1 > len(r.Owners) {
			r.Owners = append(r.Owners, owners1)
		} else {
			r.Owners[ownersCount].OrgID = owners1.OrgID
			r.Owners[ownersCount].UserID = owners1.UserID
		}
	}
	r.Schema = types.StringValue(resp.Schema)
	r.Tags = nil
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}
	r.Title = types.StringValue(resp.Title)
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	if len(r.AvailabilityFiles) > len(resp.AvailabilityFiles) {
		r.AvailabilityFiles = r.AvailabilityFiles[:len(resp.AvailabilityFiles)]
	}
	for availabilityFilesCount, availabilityFilesItem := range resp.AvailabilityFiles {
		var availabilityFiles1 BaseRelation
		if len(availabilityFiles1.DollarRelation) > len(availabilityFilesItem.DollarRelation) {
			availabilityFiles1.DollarRelation = availabilityFiles1.DollarRelation[:len(availabilityFilesItem.DollarRelation)]
		}
		for dollarRelationCount, dollarRelationItem := range availabilityFilesItem.DollarRelation {
			var dollarRelation1 DollarRelation
			if dollarRelationItem.EntityID != nil {
				dollarRelation1.EntityID = types.StringValue(*dollarRelationItem.EntityID)
			} else {
				dollarRelation1.EntityID = types.StringNull()
			}
			if dollarRelationCount+1 > len(availabilityFiles1.DollarRelation) {
				availabilityFiles1.DollarRelation = append(availabilityFiles1.DollarRelation, dollarRelation1)
			} else {
				availabilityFiles1.DollarRelation[dollarRelationCount].EntityID = dollarRelation1.EntityID
			}
		}
		if availabilityFilesCount+1 > len(r.AvailabilityFiles) {
			r.AvailabilityFiles = append(r.AvailabilityFiles, availabilityFiles1)
		} else {
			r.AvailabilityFiles[availabilityFilesCount].DollarRelation = availabilityFiles1.DollarRelation
		}
	}
	if resp.Code != nil {
		r.Code = types.StringValue(*resp.Code)
	} else {
		r.Code = types.StringNull()
	}
	if resp.CrossSellableProducts == nil {
		r.CrossSellableProducts = nil
	} else {
		r.CrossSellableProducts = &ProductCreateCrossSellableProducts{}
		if len(r.CrossSellableProducts.DollarRelation) > len(resp.CrossSellableProducts.DollarRelation) {
			r.CrossSellableProducts.DollarRelation = r.CrossSellableProducts.DollarRelation[:len(resp.CrossSellableProducts.DollarRelation)]
		}
		for dollarRelationCount1, dollarRelationItem1 := range resp.CrossSellableProducts.DollarRelation {
			var dollarRelation3 BaseRelation
			if len(dollarRelation3.DollarRelation) > len(dollarRelationItem1.DollarRelation) {
				dollarRelation3.DollarRelation = dollarRelation3.DollarRelation[:len(dollarRelationItem1.DollarRelation)]
			}
			for dollarRelationCount2, dollarRelationItem2 := range dollarRelationItem1.DollarRelation {
				var dollarRelation5 DollarRelation
				if dollarRelationItem2.EntityID != nil {
					dollarRelation5.EntityID = types.StringValue(*dollarRelationItem2.EntityID)
				} else {
					dollarRelation5.EntityID = types.StringNull()
				}
				if dollarRelationCount2+1 > len(dollarRelation3.DollarRelation) {
					dollarRelation3.DollarRelation = append(dollarRelation3.DollarRelation, dollarRelation5)
				} else {
					dollarRelation3.DollarRelation[dollarRelationCount2].EntityID = dollarRelation5.EntityID
				}
			}
			if dollarRelationCount1+1 > len(r.CrossSellableProducts.DollarRelation) {
				r.CrossSellableProducts.DollarRelation = append(r.CrossSellableProducts.DollarRelation, dollarRelation3)
			} else {
				r.CrossSellableProducts.DollarRelation[dollarRelationCount1].DollarRelation = dollarRelation3.DollarRelation
			}
		}
	}
	if resp.Description != nil {
		r.Description = types.StringValue(*resp.Description)
	} else {
		r.Description = types.StringNull()
	}
	if len(r.Feature) > len(resp.Feature) {
		r.Feature = r.Feature[:len(resp.Feature)]
	}
	for featureCount, featureItem := range resp.Feature {
		var feature1 Feature
		feature1.Tags = nil
		for _, v := range featureItem.Tags {
			feature1.Tags = append(feature1.Tags, types.StringValue(v))
		}
		if featureItem.Feature != nil {
			feature1.Feature = types.StringValue(*featureItem.Feature)
		} else {
			feature1.Feature = types.StringNull()
		}
		if featureCount+1 > len(r.Feature) {
			r.Feature = append(r.Feature, feature1)
		} else {
			r.Feature[featureCount].Tags = feature1.Tags
			r.Feature[featureCount].Feature = feature1.Feature
		}
	}
	if resp.InternalName != nil {
		r.InternalName = types.StringValue(*resp.InternalName)
	} else {
		r.InternalName = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.PriceOptions == nil {
		r.PriceOptions = nil
	} else {
		r.PriceOptions = &BaseRelation{}
		if len(r.PriceOptions.DollarRelation) > len(resp.PriceOptions.DollarRelation) {
			r.PriceOptions.DollarRelation = r.PriceOptions.DollarRelation[:len(resp.PriceOptions.DollarRelation)]
		}
		for dollarRelationCount3, dollarRelationItem3 := range resp.PriceOptions.DollarRelation {
			var dollarRelation7 DollarRelation
			if dollarRelationItem3.EntityID != nil {
				dollarRelation7.EntityID = types.StringValue(*dollarRelationItem3.EntityID)
			} else {
				dollarRelation7.EntityID = types.StringNull()
			}
			if dollarRelationCount3+1 > len(r.PriceOptions.DollarRelation) {
				r.PriceOptions.DollarRelation = append(r.PriceOptions.DollarRelation, dollarRelation7)
			} else {
				r.PriceOptions.DollarRelation[dollarRelationCount3].EntityID = dollarRelation7.EntityID
			}
		}
	}
	if resp.ProductDownloads == nil {
		r.ProductDownloads = nil
	} else {
		r.ProductDownloads = &ProductCreateCrossSellableProducts{}
		if len(r.ProductDownloads.DollarRelation) > len(resp.ProductDownloads.DollarRelation) {
			r.ProductDownloads.DollarRelation = r.ProductDownloads.DollarRelation[:len(resp.ProductDownloads.DollarRelation)]
		}
		for dollarRelationCount4, dollarRelationItem4 := range resp.ProductDownloads.DollarRelation {
			var dollarRelation9 BaseRelation
			if len(dollarRelation9.DollarRelation) > len(dollarRelationItem4.DollarRelation) {
				dollarRelation9.DollarRelation = dollarRelation9.DollarRelation[:len(dollarRelationItem4.DollarRelation)]
			}
			for dollarRelationCount5, dollarRelationItem5 := range dollarRelationItem4.DollarRelation {
				var dollarRelation11 DollarRelation
				if dollarRelationItem5.EntityID != nil {
					dollarRelation11.EntityID = types.StringValue(*dollarRelationItem5.EntityID)
				} else {
					dollarRelation11.EntityID = types.StringNull()
				}
				if dollarRelationCount5+1 > len(dollarRelation9.DollarRelation) {
					dollarRelation9.DollarRelation = append(dollarRelation9.DollarRelation, dollarRelation11)
				} else {
					dollarRelation9.DollarRelation[dollarRelationCount5].EntityID = dollarRelation11.EntityID
				}
			}
			if dollarRelationCount4+1 > len(r.ProductDownloads.DollarRelation) {
				r.ProductDownloads.DollarRelation = append(r.ProductDownloads.DollarRelation, dollarRelation9)
			} else {
				r.ProductDownloads.DollarRelation[dollarRelationCount4].DollarRelation = dollarRelation9.DollarRelation
			}
		}
	}
	if resp.ProductImages == nil {
		r.ProductImages = nil
	} else {
		r.ProductImages = &ProductCreateCrossSellableProducts{}
		if len(r.ProductImages.DollarRelation) > len(resp.ProductImages.DollarRelation) {
			r.ProductImages.DollarRelation = r.ProductImages.DollarRelation[:len(resp.ProductImages.DollarRelation)]
		}
		for dollarRelationCount6, dollarRelationItem6 := range resp.ProductImages.DollarRelation {
			var dollarRelation13 BaseRelation
			if len(dollarRelation13.DollarRelation) > len(dollarRelationItem6.DollarRelation) {
				dollarRelation13.DollarRelation = dollarRelation13.DollarRelation[:len(dollarRelationItem6.DollarRelation)]
			}
			for dollarRelationCount7, dollarRelationItem7 := range dollarRelationItem6.DollarRelation {
				var dollarRelation15 DollarRelation
				if dollarRelationItem7.EntityID != nil {
					dollarRelation15.EntityID = types.StringValue(*dollarRelationItem7.EntityID)
				} else {
					dollarRelation15.EntityID = types.StringNull()
				}
				if dollarRelationCount7+1 > len(dollarRelation13.DollarRelation) {
					dollarRelation13.DollarRelation = append(dollarRelation13.DollarRelation, dollarRelation15)
				} else {
					dollarRelation13.DollarRelation[dollarRelationCount7].EntityID = dollarRelation15.EntityID
				}
			}
			if dollarRelationCount6+1 > len(r.ProductImages.DollarRelation) {
				r.ProductImages.DollarRelation = append(r.ProductImages.DollarRelation, dollarRelation13)
			} else {
				r.ProductImages.DollarRelation[dollarRelationCount6].DollarRelation = dollarRelation13.DollarRelation
			}
		}
	}
	if resp.Type != nil {
		r.Type = types.StringValue(string(*resp.Type))
	} else {
		r.Type = types.StringNull()
	}
}

func (r *ProductResourceModel) RefreshFromCreateResponse(resp *shared.Product) {
	r.RefreshFromGetResponse(resp)
}

func (r *ProductResourceModel) RefreshFromUpdateResponse(resp *shared.Product) {
	r.RefreshFromGetResponse(resp)
}
