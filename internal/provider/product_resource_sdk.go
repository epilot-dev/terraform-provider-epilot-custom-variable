// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *ProductResourceModel) ToSharedProductCreate() *shared.ProductCreate {
	active := r.Active.ValueBool()
	code := new(string)
	if !r.Code.IsUnknown() && !r.Code.IsNull() {
		*code = r.Code.ValueString()
	} else {
		code = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var feature []shared.ProductCreateFeature = nil
	for _, featureItem := range r.Feature {
		id := new(string)
		if !featureItem.ID.IsUnknown() && !featureItem.ID.IsNull() {
			*id = featureItem.ID.ValueString()
		} else {
			id = nil
		}
		var tags []string = nil
		for _, tagsItem := range featureItem.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
		feature1 := new(string)
		if !featureItem.Feature.IsUnknown() && !featureItem.Feature.IsNull() {
			*feature1 = featureItem.Feature.ValueString()
		} else {
			feature1 = nil
		}
		feature = append(feature, shared.ProductCreateFeature{
			ID:      id,
			Tags:    tags,
			Feature: feature1,
		})
	}
	internalName := new(string)
	if !r.InternalName.IsUnknown() && !r.InternalName.IsNull() {
		*internalName = r.InternalName.ValueString()
	} else {
		internalName = nil
	}
	name := r.Name.ValueString()
	var priceOptions *shared.BaseRelation
	if r.PriceOptions != nil {
		var dollarRelation []shared.DollarRelation = nil
		for _, dollarRelationItem := range r.PriceOptions.DollarRelation {
			var tags1 []string = nil
			for _, tagsItem1 := range dollarRelationItem.Tags {
				tags1 = append(tags1, tagsItem1.ValueString())
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags1,
				EntityID: entityID,
			})
		}
		priceOptions = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	typeVar := new(shared.ProductCreateType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.ProductCreateType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.ProductCreate{
		Active:       active,
		Code:         code,
		Description:  description,
		Feature:      feature,
		InternalName: internalName,
		Name:         name,
		PriceOptions: priceOptions,
		Type:         typeVar,
	}
	return &out
}

func (r *ProductResourceModel) RefreshFromSharedProduct(resp *shared.Product) {
	if resp.ACL.AdditionalProperties == nil {
		r.ACL.AdditionalProperties = types.StringNull()
	} else {
		additionalPropertiesResult, _ := json.Marshal(resp.ACL.AdditionalProperties)
		r.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
	}
	r.ACL.Delete = nil
	for _, v := range resp.ACL.Delete {
		r.ACL.Delete = append(r.ACL.Delete, types.StringValue(v))
	}
	r.ACL.Edit = nil
	for _, v := range resp.ACL.Edit {
		r.ACL.Edit = append(r.ACL.Edit, types.StringValue(v))
	}
	r.ACL.View = nil
	for _, v := range resp.ACL.View {
		r.ACL.View = append(r.ACL.View, types.StringValue(v))
	}
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	r.ID = types.StringValue(resp.ID)
	r.Org = types.StringValue(resp.Org)
	if len(r.Owners) > len(resp.Owners) {
		r.Owners = r.Owners[:len(resp.Owners)]
	}
	for ownersCount, ownersItem := range resp.Owners {
		var owners1 BaseEntityOwner
		owners1.OrgID = types.StringValue(ownersItem.OrgID)
		owners1.UserID = types.StringPointerValue(ownersItem.UserID)
		if ownersCount+1 > len(r.Owners) {
			r.Owners = append(r.Owners, owners1)
		} else {
			r.Owners[ownersCount].OrgID = owners1.OrgID
			r.Owners[ownersCount].UserID = owners1.UserID
		}
	}
	r.Schema = types.StringValue(resp.Schema)
	r.Tags = nil
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}
	r.Title = types.StringValue(resp.Title)
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	r.Active = types.BoolValue(resp.Active)
	r.Code = types.StringPointerValue(resp.Code)
	r.Description = types.StringPointerValue(resp.Description)
	if len(r.Feature) > len(resp.Feature) {
		r.Feature = r.Feature[:len(resp.Feature)]
	}
	for featureCount, featureItem := range resp.Feature {
		var feature1 Feature
		feature1.ID = types.StringPointerValue(featureItem.ID)
		feature1.Tags = nil
		for _, v := range featureItem.Tags {
			feature1.Tags = append(feature1.Tags, types.StringValue(v))
		}
		feature1.Feature = types.StringPointerValue(featureItem.Feature)
		if featureCount+1 > len(r.Feature) {
			r.Feature = append(r.Feature, feature1)
		} else {
			r.Feature[featureCount].ID = feature1.ID
			r.Feature[featureCount].Tags = feature1.Tags
			r.Feature[featureCount].Feature = feature1.Feature
		}
	}
	r.InternalName = types.StringPointerValue(resp.InternalName)
	r.Name = types.StringValue(resp.Name)
	if resp.PriceOptions == nil {
		r.PriceOptions = nil
	} else {
		r.PriceOptions = &BaseRelation{}
		if len(r.PriceOptions.DollarRelation) > len(resp.PriceOptions.DollarRelation) {
			r.PriceOptions.DollarRelation = r.PriceOptions.DollarRelation[:len(resp.PriceOptions.DollarRelation)]
		}
		for dollarRelationCount, dollarRelationItem := range resp.PriceOptions.DollarRelation {
			var dollarRelation1 DollarRelation
			dollarRelation1.Tags = nil
			for _, v := range dollarRelationItem.Tags {
				dollarRelation1.Tags = append(dollarRelation1.Tags, types.StringValue(v))
			}
			dollarRelation1.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)
			if dollarRelationCount+1 > len(r.PriceOptions.DollarRelation) {
				r.PriceOptions.DollarRelation = append(r.PriceOptions.DollarRelation, dollarRelation1)
			} else {
				r.PriceOptions.DollarRelation[dollarRelationCount].Tags = dollarRelation1.Tags
				r.PriceOptions.DollarRelation[dollarRelationCount].EntityID = dollarRelation1.EntityID
			}
		}
	}
	if resp.Type != nil {
		r.Type = types.StringValue(string(*resp.Type))
	} else {
		r.Type = types.StringNull()
	}
}
